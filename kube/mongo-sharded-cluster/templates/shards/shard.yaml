{{- $replicas := int .Values.sharding.replicasPerCluster }}
{{- $clusters := int .Values.sharding.clusterCount }}
{{- range $i, $e := until $clusters }}
{{- $index := add1 $i }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ printf "%s%d-headless" $.Values.sharding.baseName $index }}
  labels:
    app: {{ printf "%s%d" $.Values.sharding.baseName $index }}
    {{- include "mongo-sharded-cluster.labels" $ | nindent 4 }}
spec:
  ports:
    - port: {{ $.Values.sharding.port }}
      name: mongo
  clusterIP: None
  selector:
    app: {{ printf "%s%d" $.Values.sharding.baseName $index }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "%s%d" $.Values.sharding.baseName $index }}
  labels:
    {{- include "mongo-sharded-cluster.labels" $ | nindent 4 }}
    app: {{ printf "%s%d" $.Values.sharding.baseName $index }}
spec:
  serviceName: "{{ printf "%s%d-headless" $.Values.sharding.baseName $index }}"
  replicas: {{ $replicas }}
  selector:
    matchLabels:
      app: {{ printf "%s%d" $.Values.sharding.baseName $index }}
  template:
    metadata:
      labels:
        app: {{ printf "%s%d" $.Values.sharding.baseName $index }}
        {{- include "mongo-sharded-cluster.labels" $ | nindent 8 }}
    spec:
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: wait-for-configsvr
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          env:
            - name: MONGO_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-cluster-admin-password
                  key: username
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-cluster-admin-password
                  key: password
          command:
            - bash
            - -c
            - |
              # Wait for MongoDB config server replica set to be ready before starting shard
              # Construct the config server hostname using Kubernetes DNS
              CONFIG_SVR_HOST="mongo-csrs-0.{{ $.Values.configServer.headlessServiceName }}.{{ $.Release.Namespace }}.svc.cluster.local:{{ $.Values.configServer.port }}"

              # Retry configuration - wait up to 5 minutes (30 * 10 seconds)
              MAX_RETRIES=30
              RETRY_COUNT=0
              SUCCESS=false
              
              # Poll the config server until it's ready or max retries reached
              until [ $RETRY_COUNT -ge $MAX_RETRIES ]; do
                RETRY_COUNT=$((RETRY_COUNT+1))
                # Check if replica set is healthy by querying rs.status().ok
                # Returns 1 if healthy, anything else if not ready
                if mongosh --quiet --host "$CONFIG_SVR_HOST" --eval 'rs.status().ok' --username "$MONGO_USERNAME" --password "$MONGO_PASSWORD" --authenticationDatabase "admin" 2>/dev/null | grep -q "1"; then
                  SUCCESS=true
                  break
                fi
                # Wait 10 seconds before next retry
                sleep 10
              done

              # Exit with failure if config server never became ready
              if [ "$SUCCESS" != "true" ]; then
                exit 1
              fi
      containers:
        - name: mongod-shardsvr
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag }}"
          command:
            - "mongod"
            - "--shardsvr"
            - "--replSet"
            - "{{ printf "%s%d" $.Values.sharding.replicaSetBaseName $index }}"
            - "--dbpath"
            - "/data/db"
            - "--port"
            - "{{ $.Values.sharding.port }}"
            - "--bind_ip_all"
            - "--keyFile"
            - "/etc/mongo-secrets/mongo-keyfile"
            - "--auth"
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - -c
                  - |
                   # Only run replica set initialization on the last pod (highest ordinal)
                   # This ensures only one pod attempts to initialize the replica set
                   if [ "$HOSTNAME" != "{{ printf "%s%d" $.Values.sharding.baseName $index }}-{{ sub $replicas 1 }}" ]; then
                      exit 0
                    fi

                    # Wait for MongoDB to be ready to accept connections
                    # This ensures the database is fully started before attempting replica set operations
                    until mongosh --eval "db.adminCommand('ping').ok" | grep -q "1"; do
                        sleep 5
                    done

                    # Check if replica set is already initialized to avoid duplicate initialization
                    # This prevents errors when pods restart and try to re-initialize an existing replica set
                    if mongosh --eval "rs.status().ok" | grep -q "1"; then
                        echo "Replica set already initialized"
                        exit 0
                    fi

                    # Initialize the replica set with all members
                    # Each member is configured with its Kubernetes DNS hostname and port
                    mongosh --eval '
                      rs.initiate({
                        _id: "{{ printf "%s%d" $.Values.sharding.replicaSetBaseName $index }}",
                        members: [
                          {{- $n := int $replicas }}
                          {{- range $i, $_ := until $n }}
                            { _id: {{ $i }}, host: "{{ printf "%s%d" $.Values.sharding.baseName $index }}-{{ $i }}.{{ printf "%s%d-headless" $.Values.sharding.baseName $index }}.{{ $.Release.Namespace }}.svc.cluster.local:{{ $.Values.sharding.port }}" }{{- if lt $i (sub $n 1) }},{{ end }}
                          {{- end }}
                        ]
                      });
                    '
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: mongo-cluster-admin-password
                  key: username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongo-cluster-admin-password
                  key: password
          ports:
            - containerPort: {{ $.Values.sharding.port }}
              name: mongo
          volumeMounts:
            - name: {{ printf "mongo-shard%d-data" $index }}
              mountPath: /data/db
            - name: mongo-keyfile-volume
              mountPath: /etc/mongo-secrets
              readOnly: true
          resources:
{{- toYaml $.Values.sharding.resources | nindent 12 }}
          startupProbe:
            exec:
              command:
                - mongosh
                - --eval
                - db.adminCommand('ping').ok === 1
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - db.adminCommand('ping').ok === 1
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - db.adminCommand('ping').ok === 1
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: mongo-keyfile-volume
          secret:
            secretName: {{ $.Values.keyfile.existingSecret }}
            defaultMode: 0400
  volumeClaimTemplates:
    - metadata:
        name: {{ printf "mongo-shard%d-data" $index }}
        labels:
          app: {{ printf "%s%d" $.Values.sharding.baseName $index }}
          {{- include "mongo-sharded-cluster.labels" $ | nindent 10 }}
        annotations:
          "helm.sh/resource-policy": keep
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ $.Values.sharding.storage }}
{{- if $.Values.sharding.storageClassName }}
        storageClassName: "{{ $.Values.sharding.storageClassName }}"
{{- end }}
{{- end }}