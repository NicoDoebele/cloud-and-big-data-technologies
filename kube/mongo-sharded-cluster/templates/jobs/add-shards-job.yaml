apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-add-shards
  labels:
    app: {{ .Release.Name }}-add-shards
    release: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": "post-install,post-upgrade"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": "before-hook-creation"
spec:
  template:
    spec:
      serviceAccountName: {{ .Release.Name }}-add-shards
      containers:
      - name: {{ .Release.Name }}-add-shards
        image: bitnami/kubectl:1.33.1
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: MONGO_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.adminUser.existingSecret }}
              key: username
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.adminUser.existingSecret }}
              key: password
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        command:
        - /bin/sh
        - -c
        - |
          until kubectl get pods -l app={{ .Values.mongos.name }} -o jsonpath='{.items[0].status.phase}' | grep -q "Running"; do
            echo "Waiting for mongos pod to be ready..."
            sleep 5
          done

          MONGOS_POD=$(kubectl get pods -l app={{ .Values.mongos.name }} -o jsonpath='{.items[0].metadata.name}')

          until kubectl exec $MONGOS_POD -- mongosh --quiet --username $MONGO_USERNAME --password $MONGO_PASSWORD --authenticationDatabase admin --eval "db.adminCommand('ping').ok" | grep -q "1"; do
            echo "Waiting for mongos to be responsive..."
            sleep 5
          done

          SHARD_COUNT={{ .Values.sharding.clusterCount }}
          for i in $(seq 1 $SHARD_COUNT); do
            REPLICA_COUNT={{ .Values.sharding.replicasPerCluster }}
            LAST_REPLICA=$((REPLICA_COUNT - 1))
            SHARD_LABEL="app={{ .Values.sharding.baseName }}$i"
            
            until {
              ACTUAL_PODS=$(kubectl get pods -l "$SHARD_LABEL" -o jsonpath='{.items}' | jq 'length')
              [ "$ACTUAL_PODS" -eq "$REPLICA_COUNT" ] && \
              kubectl get pods -l "$SHARD_LABEL" -o jsonpath="{.items[$LAST_REPLICA].status.phase}" | grep -q "Running"
            }; do
              echo "Waiting for last replica of shard $i to be ready... (Found $ACTUAL_PODS/$REPLICA_COUNT pods)"
              sleep 5
            done

            FIRST_SHARD_POD="{{ .Values.sharding.baseName }}$i-0"

            until kubectl exec $FIRST_SHARD_POD -- mongosh --quiet --eval "rs.status().ok" | grep -q "1"; do
              echo "Waiting for replica set of shard $i to be initialized..."
              sleep 5
            done

            until kubectl exec $FIRST_SHARD_POD -- mongosh --quiet --eval "rs.status().members.some(m => m.stateStr === 'PRIMARY')" | grep -q "true"; do
              echo "Waiting for primary in shard $i..."
              sleep 5
            done

            SHARD_ID="{{ .Values.sharding.replicaSetBaseName }}$i"
            SHARD_EXISTS=$(kubectl exec $MONGOS_POD -- mongosh --quiet --username $MONGO_USERNAME --password $MONGO_PASSWORD --authenticationDatabase admin --eval "db.adminCommand('listShards').shards.some(s => s._id === '$SHARD_ID')" --quiet)
            
            if [ "$SHARD_EXISTS" = "false" ]; then
              SHARD_HOSTS=""
              for j in $(seq 0 $LAST_REPLICA); do
                if [ $j -gt 0 ]; then
                  SHARD_HOSTS="${SHARD_HOSTS},"
                fi
                SHARD_HOSTS="${SHARD_HOSTS}{{ .Values.sharding.baseName }}$i-$j.{{ .Values.sharding.baseName }}$i-headless.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.sharding.port }}"
              done

              echo "Adding shard $i..."
              echo "sh.addShard(\"$SHARD_ID/$SHARD_HOSTS\")"
              kubectl exec $MONGOS_POD -- mongosh --quiet --username $MONGO_USERNAME --password $MONGO_PASSWORD --authenticationDatabase admin --eval "sh.addShard(\"$SHARD_ID/$SHARD_HOSTS\")"
            else
              echo "Shard $i already exists, skipping..."
            fi
          done

          {{- if .Values.sharding.autoShardConfig.enabled }}
          AUTO_SHARDED=$(kubectl exec $MONGOS_POD -- mongosh --quiet --username $MONGO_USERNAME --password $MONGO_PASSWORD --authenticationDatabase admin --eval "db.getSiblingDB('clusterConfig').autoShardConfig.findOne({type: 'autoShard'})" --quiet)
          
          if [ "$AUTO_SHARDED" = "null" ]; then
            echo "Running auto-shard configuration..."
            kubectl exec $MONGOS_POD -- mongosh --quiet --username $MONGO_USERNAME --password $MONGO_PASSWORD --authenticationDatabase admin --eval "$(cat /scripts/auto-shard.sh)"
            
            kubectl exec $MONGOS_POD -- mongosh --quiet --username $MONGO_USERNAME --password $MONGO_PASSWORD --authenticationDatabase admin --eval "db.getSiblingDB('clusterConfig').autoShardConfig.insertOne({type: 'autoShard', completed: true, timestamp: new Date()})"
          else
            echo "Auto-sharding already configured, skipping..."
          fi
          {{- end }}

          echo "Done"
      volumes:
      - name: scripts
        configMap:
          name: {{ .Release.Name }}-scripts
      restartPolicy: OnFailure 